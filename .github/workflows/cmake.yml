name: CMake

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:
  schedule:
    - cron: "0 12 1,15 * *"

env:
  BUILD_TYPE: Release
  GP2040_BOARDCONFIG: IntegratedPicoFightingBoard
  GP2040_REPO: OpenStickCommunity/GP2040-CE

jobs:
  get-tags:
    runs-on: ubuntu-latest
    outputs:
      next_tag: ${{ steps.tags.outputs.next_tag }}
      gp2040_ce_tag: ${{ steps.tags.outputs.gp2040_ce_tag }}
    steps:
    - if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
      run: |
        TAG=$(gh release view --repo '${{ env.GP2040_REPO }}' --json tagName --jq .tagName || echo)
        echo 'GP2040_CE_TAG='$TAG >> $GITHUB_ENV
        echo 'CURRENT_TAG=' >> $GITHUB_ENV
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OWNER: ${{ github.repository_owner }}
        REPO: ${{ github.event.repository.name }}

    - if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
      run: |
        TAG=$(gh release view --repo '${{ github.repository }}' --json tagName --jq .tagName || echo)
        echo 'LAST_TAG='$TAG >> $GITHUB_ENV
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OWNER: ${{ github.repository_owner }}
        REPO: ${{ github.event.repository.name }}

    - if: ${{ github.ref_type == 'tag' }}
      run: |
        echo 'CURRENT_TAG='$(echo ${{ github.ref_name }} | sed -E 's/^(v[0-9]+\.[0-9]+\.[0-9]+).*/\1/g') >> $GITHUB_ENV

    - if: ${{ github.ref_type == 'tag' }}
      run: |
        TAG=$(gh release view --repo '${{ env.GP2040_REPO }}' '${{ env.CURRENT_TAG }}' --json tagName --jq .tagName || echo)
        if [ $TAG == 'release not found' ] || [ $TAG == '' ]; then
          >&2 echo "Couldn't find GP2040 release!"
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OWNER: ${{ github.repository_owner }}
        REPO: ${{ github.event.repository.name }}

    - if: ${{ env.GP2040_CE_TAG == 'release not found' || env.GP2040_CE_TAG == '' }}
      run: |
        >&2 echo "Couldn't find GP2040 release!"
        exit 1

    - id: tags
      run: |
        echo 'gp2040_ce_tag='${{ env.GP2040_CE_TAG }} >> "$GITHUB_OUTPUT"
        if [ ${{ env.GP2040_CE_TAG }} != $CURRENT_TAG ]; then
          echo 'next_tag='${{ env.GP2040_CE_TAG}} >> "$GITHUB_OUTPUT"
        else
          echo 'next_tag=' >> $GITHUB_OUTPUT
        fi

  build-web-interface:
    uses: ./.github/workflows/node.js.yml

  build-firmware:
    needs:
      - build-web-interface
      - get-tags
    # The CMake configure and build commands are platform-agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    env:
      GP2040_CE_TAG: ${{needs.get-tags.outputs.gp2040_ce_tag}}

    steps:
    #Global Setup
    - name: Checkout GP2040-CE
      uses: actions/checkout@v4.1.1
      with:
        repository: '${{ env.GP2040_REPO }}'
        ref: '${{ env.GP2040_CE_TAG }}'
        fetch-depth: 0
        fetch-tags: true

    - name: Checkout IPFB
      uses: actions/checkout@v4.1.1
      with:
        path: configs/${{ env.GP2040_BOARDCONFIG }}

    - name: Setup SDK pipeline
      uses: Fortinbra/RaspberryPiPicoBuild@v3

    - name: Download a Build Artifact
      uses: actions/download-artifact@v4.1.2
      with:
        name: fsData
        path: ${{github.workspace}}/lib/httpd/

    - name: Get core count
      id: core_count
      run: echo 'output='$(cat /proc/cpuinfo | grep processor | wc -l) >> "$GITHUB_OUTPUT"
      #End Global Setup

    - name: Pico Build Configure CMake
      shell: bash
      run: PICO_SDK_PATH=${{github.workspace}}/pico-sdk GP2040_BOARDCONFIG=${{ env.GP2040_BOARDCONFIG }} SKIP_WEBBUILD=TRUE cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Pico Build
      shell: bash
      run: GP2040_BOARDCONFIG=${{ env.GP2040_BOARDCONFIG }} cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel ${{steps.core_count.outputs.output}}

    - name: Upload Pico Artifact
      uses: actions/upload-artifact@v4.3.1
      with:
        name: GP2040-CE - ${{ env.GP2040_BOARDCONFIG }}
        path: ${{github.workspace}}/build/GP2040-CE_*_${{ env.GP2040_BOARDCONFIG }}.uf2
        if-no-files-found: error

  create-release:
    permissions:
      contents: write
    needs:
      - get-tags
      - build-firmware
    env:
      RELEASE_VERSION: ${{needs.get-tags.outputs.next_tag}}
    if: ${{ github.ref == 'refs/heads/main' && needs.get-tags.outputs.next_tag != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4.1.2
        with:
          name: GP2040-CE - ${{ env.GP2040_BOARDCONFIG }}
          path: ${{github.workspace}}/

      - name: Create Release
        run: gh release create --repo '${{ github.repository }}' --notes "This is an automated release. See the GP2040-CE patch notes for ${{ env.RELEASE_VERSION }} [here](https://github.com/${{ env.GP2040_REPO }}/releases/tag/${{ env.RELEASE_VERSION }})." ${{ env.RELEASE_VERSION }} ./*.uf2
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
